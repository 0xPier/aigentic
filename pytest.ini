[tool:pytest]
# Pytest configuration for AI Consultancy Platform

# Test discovery
testpaths = tests
python_files = test_*.py
python_classes = Test*
python_functions = test_*

# Output and reporting
addopts = 
    --strict-markers
    --strict-config
    --verbose
    --tb=short
    --color=yes
    --durations=10
    --disable-warnings
    --cov=src
    --cov-report=html:htmlcov
    --cov-report=term-missing
    --cov-fail-under=80

# Test markers
markers =
    unit: Unit tests for individual components
    integration: Integration tests for component interactions
    api: API endpoint tests
    agent: Agent functionality tests
    memory: Memory management tests
    auth: Authentication and authorization tests
    performance: Performance and load tests
    slow: Tests that take longer than usual to run
    external: Tests that require external services
    mock: Tests using mocked dependencies

# Minimum version requirements
minversion = 6.0

# Test timeout (in seconds)
timeout = 300

# Asyncio configuration
asyncio_mode = auto

# Filtering
filterwarnings =
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore::UserWarning:sqlalchemy.*
    ignore::UserWarning:aiohttp.*

# Coverage configuration
[coverage:run]
source = src
omit = 
    */tests/*
    */venv/*
    */env/*
    */__pycache__/*
    */migrations/*
    */alembic/*
    */conftest.py

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    if self.debug:
    if settings.DEBUG
    raise AssertionError
    raise NotImplementedError
    if 0:
    if __name__ == .__main__.:
    class .*\bProtocol\):
    @(abc\.)?abstractmethod

[coverage:html]
directory = htmlcov
